!!! XML utf-8
!!! Strict
:plain
  {% assign lang = 'en' %}{% capture timestamp %}{{site.time | date: "%a, %d %b %y %H:%M:%S +0100" }}{% endcapture %}
%html{:xmlns => "http://www.w3.org/1999/xhtml", "xml:lang" => "{{ lang }}", :lang => "{{ lang }}" }>
  %head
    %meta{ "http-equiv" => "Content-Type", :content => "text/html; charset=utf-8" }
    %meta{ "http-equiv" => "Date", :content => "{{ timestamp }}" }
    %meta{ "http-equiv" => "Last-Modified", :content => "{{ timestamp }}" }
    %meta{ "http-equiv" => "Access-Control-Allow-Origin", :content => "*" }
    %meta{ :name => "description", :content => "A personal blog about programming." }
    %meta{ :name => "author", :content => "Bas Bossink" }
    {% if page.categories %}
    %meta{ :name => "keywords", :content => "{{ page.categories | join: ',' }}" }>
    {% endif %}
    {% if page.keywords %}
    %meta{ :name => "keywords", :content => "{{ page.keywords | join: ',' }}" }>
    {% endif %}    
    %title {{ page.title }}
    %link{ :rel => "stylesheet", :type => "text/css", :href => "/css/default.css"}
    %link{ :rel => "stylesheet", :type => "text/css", :href => "/css/syntax.css"}
    %link{ :rel => "alternate", :type => "application/atom+xml",
           :href => "/atom.xml", :title => "Sitewide ATOM Feed"}
    :javascript
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-20785819-1']);
      _gaq.push(['_trackPageview']);

      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  %body
    %div#banner
      %h1 Move along, nothing to see here
      %h2 Ramblings about my programming escapades.
    %div#container
      {{ content }}
      %div.footer  
        %p
          %a{ :href => "http://validator.w3.org/check?uri=referer"}
            Valid XHTML 1.0 Strict 
            |  
            %a{ :href => "http://jigsaw.w3.org/css-validator/check/referer"}
              Valid CSS 
              |  
              %a{ :href => "http://feed2.w3.org/check.cgi?url=http%3A//basbossink.github.com/atom.xml"}
                Valid Atom 1.0
                |
                Hosted by 
                %a{ :href => "https://github.com/basbossink/basbossink.github.com/"} GitHub
                and powered by&#32;
                %a{ :href => "https://github.com/mojombo/jekyll/"}> Jekyll
                ,&#32;
                %a{ :href => "http://haml-lang.com/"} Haml
                &amp;&#32;
                %a{ :href => "http://sass-lang.com/"}> Sass
                \.
        %p
          This work is licensed under a&#32;
          %a{ :rel => "license", :href => "http://creativecommons.org/licenses/by/3.0/nl/"}> |
          Creative Commons Attribution 3.0 Netherlands License |
          \.
          Copyright &copy; {{ site.time | date: "%Y" }} Bas Bossink
        %p
          Last updated on: {{ site.time | date_to_xmlschema }}
    %div#linkList
      %a{ :href => "/atom.xml"}
        %img{ :alt => "subcribe", :src => "/images/feed-icon.png"}
      %h3
        %a{ :href => "/"} Home
      %h3 Posts
      %ul
        {% for post in site.posts limit:5  %}
        %li>
          %a{ :href => "{{ post.url }}" }>
            {{ post.title | truncate: 25 }}
          %div.comment_count
            %a{ :href => "{{ post.url }}#disqus_thread", 
              "data-disqus-identifier" => "{{ post.id }}" }>
        {% endfor %}
      %h3 Profiles
      %ul
        %li
          %a{ :href => "http://stackoverflow.com/users/74198/bas-bossink"}
            Stack Overflow
          - require 'uri'
          - require 'yajl/gzip'
          - require 'yajl/deflate'
          - require 'yajl/http_stream'
          - url = URI.parse('http://api.stackoverflow.com/1.0/users/74198')
          - result = Yajl::HttpStream.get(url)
          - me = result['users'][0]
          - rep = me['reputation']
          - golds = me['badge_counts']['gold']
          - silvers = me['badge_counts']['silver']
          - bronzes = me['badge_counts']['bronze']
          %div.by_line
            = rep
            = if golds > 0 then ":: <span class='gold'>#{golds}</span>" end
            = if silvers > 0 then ":: <span class='silver'>#{silvers}</span>" end
            = if bronzes > 0 then ":: <span class='bronze'>#{bronzes}</span>" end
        %li 
          %a{ :href => "http://www.twitter.com/basbossink"}
            Twitter
        %li
          %a{ :href => "http://nl.linkedin.com/in/basbossink"}
            LinkedIn
        %li
          %a{ :href => "http://nl-nl.facebook.com/people/Bas-Bossink/1820090791"}
            Facebook
      %h3 Projects
      %ul
        - [[ "http://nl.gitready.com/", "git ready (dutch translation)"],
           [ "http://basbossink.github.com/skelhs/", "Skelhs"],
           [ "https://github.com/basbossink/presentations/", "presentations"],
           [ "https://github.com/basbossink/dot-files/", "dot-files"],
           [ "https://bitbucket.org/basbossink/pygments-main/", "Pygments fork"]].each do |ref,txt| 
          %li
            %a{ :href => "#{ref}"}#{txt}
      %h3 Tags
      %ul
        :ruby
          require 'rubygems'
          require 'jekyll'
          puts "<!--"
          options = Jekyll.configuration({})
          site = Jekyll::Site.new(options)
          site.read_posts('')
          puts "-->"
          site.categories.sort.each do |category, posts|
              print "<li>"
              print "<a href='/tags/#{category.gsub(/\s+/,'-')}.html'>"
              print "#{category} (#{posts.length})</a>"
              print "</li>"
          end

